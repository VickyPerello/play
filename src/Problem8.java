import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;

public class Problem8 {

    static public void problem8() {
        //Largest product in a series
        //Problem 8
        //The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
        //
        //73167176531330624919225119674426574742355349194934
        //96983520312774506326239578318016984801869478851843
        //85861560789112949495459501737958331952853208805511
        //12540698747158523863050715693290963295227443043557
        //66896648950445244523161731856403098711121722383113
        //62229893423380308135336276614282806444486645238749
        //30358907296290491560440772390713810515859307960866
        //70172427121883998797908792274921901699720888093776
        //65727333001053367881220235421809751254540594752243
        //52584907711670556013604839586446706324415722155397
        //53697817977846174064955149290862569321978468622482
        //83972241375657056057490261407972968652414535100474
        //82166370484403199890008895243450658541227588666881
        //16427171479924442928230863465674813919123162824586
        //17866458359124566529476545682848912883142607690042
        //24219022671055626321111109370544217506941658960408
        //07198403850962455444362981230987879927244284909188
        //84580156166097919133875499200524063689912560717606
        //05886116467109405077541002256983155200055935729725
        //71636269561882670428252483600823257530420752963450
        //
        //Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

        String serie = "731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560789" +
                "1129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856" +
                "4030987111217223831136222989342338030813533627661428280644448664523874930358907296290491560440772390713810515859307960" +
                "8667017242712188399879790879227492190169972088809377665727333001053367881220235421809751254540594752243525849077116705" +
                "5601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729" +
                "6865241453510047482166370484403199890008895243450658541227588666881164271714799244429282308634656748139191231628245861" +
                "7866458359124566529476545682848912883142607690042242190226710556263211111093705442175069416589604080719840385096245544" +
                "4362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520" +
                "005593572972571636269561882670428252483600823257530420752963450";

        char[] serieArray = serie.toCharArray();
        long max = 0;

        for (int i=0; i< serie.length()-13; i++) {
            long product = 1;
            for (int j=0; j<13; j++){
                product = product * ((int)serieArray[i+j]-48);
            }
            if (product > max) {
                max = product;
            }
        }
        System.out.println(max);



    }





}
